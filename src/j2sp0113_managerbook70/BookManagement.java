/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package j2sp0113_managerbook70;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author PhongFPT
 */
public class BookManagement extends javax.swing.JFrame {

    /**
     * Creates new form BookManagement
     */
    DefaultListModel<String> listOfBookNameModel = new DefaultListModel<>();
    ArrayList<Book> bookList = new ArrayList<>();
    DefaultComboBoxModel<String> yearList = new DefaultComboBoxModel<>();

    public BookManagement() {
        initComponents();
        yearList.addElement("YEAR");
        for (int i = 1980; i <= 2020; i++) {
            yearList.addElement(Integer.toString(i));
        }
        cbYear.setModel(yearList);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstBookName = new javax.swing.JList();
        jLabel11 = new javax.swing.JLabel();
        txtBookCode = new javax.swing.JTextField();
        lbWarningBookCode = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtBookName = new javax.swing.JTextField();
        lbWarningBookName = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtAuthorName = new javax.swing.JTextField();
        lbWarningAuthorName = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtPublisherName = new javax.swing.JTextField();
        lbWarningPublisherName = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cbYear = new javax.swing.JComboBox();
        lbWarningPublishedYear = new javax.swing.JLabel();
        ckbForRent = new javax.swing.JCheckBox();
        btNew = new javax.swing.JButton();
        btSave = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        btExit = new javax.swing.JButton();

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstBookName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstBookNameMouseClicked(evt);
            }
        });
        lstBookName.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBookNameValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstBookName);

        jLabel11.setText("Book Code");

        txtBookCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBookCodeMouseClicked(evt);
            }
        });

        lbWarningBookCode.setForeground(new java.awt.Color(204, 0, 51));

        jLabel13.setText("Book Name");

        txtBookName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBookNameMouseClicked(evt);
            }
        });

        lbWarningBookName.setForeground(new java.awt.Color(204, 0, 51));

        jLabel15.setText("Author");

        txtAuthorName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAuthorNameMouseClicked(evt);
            }
        });

        lbWarningAuthorName.setForeground(new java.awt.Color(204, 0, 51));

        jLabel17.setText("Publisher");

        txtPublisherName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPublisherNameMouseClicked(evt);
            }
        });

        lbWarningPublisherName.setForeground(new java.awt.Color(204, 0, 51));

        jLabel19.setText("Published Year");

        cbYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbYearItemStateChanged(evt);
            }
        });

        lbWarningPublishedYear.setForeground(new java.awt.Color(204, 0, 51));

        ckbForRent.setText("For rent");

        btNew.setText("New");
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewActionPerformed(evt);
            }
        });

        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btRemove.setText("Remove");
        btRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoveActionPerformed(evt);
            }
        });

        btExit.setText("Exit");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel19)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17))))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExit))
                    .addComponent(ckbForRent)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lbWarningBookCode, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                        .addComponent(lbWarningBookName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbWarningAuthorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbWarningPublisherName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbWarningPublishedYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPublisherName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                        .addComponent(txtAuthorName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtBookName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtBookCode, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbWarningBookCode, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbWarningBookName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbWarningAuthorName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPublisherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbWarningPublisherName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(cbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbWarningPublishedYear, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckbForRent)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btNew)
                    .addComponent(btSave)
                    .addComponent(btRemove)
                    .addComponent(btExit))
                .addContainerGap(231, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewActionPerformed
        // TODO add your handling code here:
        setNewSetting();
    }//GEN-LAST:event_btNewActionPerformed

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        // TODO add your handling code here:
        //     hideWarningLabel();
        String bookCode = txtBookCode.getText().trim();
        String bookName = txtBookName.getText().trim();
        String authorName = txtAuthorName.getText().trim();
        String publisherName = txtPublisherName.getText().trim();
        String publishedYear = cbYear.getSelectedItem().toString().trim();
        boolean forRent = ckbForRent.isSelected();
        //user want to update
        if (!txtBookCode.isEnabled()) {
            int replaceBookIndex = findBookIndex(bookCode);
            String oldBookName = bookList.get(replaceBookIndex).getBookName();
            if (isValidateForUpdateSave(bookName, authorName, publisherName, publishedYear, oldBookName)) {
                bookList.set(replaceBookIndex, new Book(bookCode, bookName, authorName, publisherName, publishedYear, forRent));
                listOfBookNameModel.set(lstBookName.getSelectedIndex(), bookName);
                lstBookName.setModel(listOfBookNameModel);
            }
            return;
        }
        //user want to create new book
        if (isValidateForNewSave(bookCode, bookName, authorName, publisherName, publishedYear)) {
            bookList.add(new Book(bookCode, bookName, authorName, publisherName, publishedYear, forRent));
            listOfBookNameModel.addElement(bookName);
            lstBookName.setModel(listOfBookNameModel);
            JOptionPane.showMessageDialog(rootPane, "Save successful");
            setNewSetting();
        }

    }//GEN-LAST:event_btSaveActionPerformed

    private void btRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoveActionPerformed
        // TODO add your handling code here:
        Book book = getBookByBookName((String) lstBookName.getSelectedValue());
        if (listOfBookNameModel.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Nothing left to remove");
            return;
        }
        if (book != null) {
            bookList.remove(book);
            listOfBookNameModel.removeElement(book.getBookName());
            lstBookName.setModel(listOfBookNameModel);
            lstBookName.setSelectedIndex(0);
            if (listOfBookNameModel.isEmpty()) {
                setNewSetting();
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please select a book to remove");
        }


    }//GEN-LAST:event_btRemoveActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btExitActionPerformed

    private void lstBookNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstBookNameMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_lstBookNameMouseClicked

    private void lstBookNameValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBookNameValueChanged
        // TODO add your handling code here:
        hideWarningLabel();
        String selectedBookName = (String) lstBookName.getSelectedValue();
        Book selectedBook;
        if (selectedBookName != null) {
            selectedBook = getBookByBookName(selectedBookName);
            txtBookCode.setText(selectedBook.getBookCode());
            txtBookCode.setEnabled(false);
            txtBookName.setText(selectedBook.getBookName());
            txtAuthorName.setText(selectedBook.getAuthorName());
            txtPublisherName.setText(selectedBook.getPublisherName());
            cbYear.setSelectedItem(selectedBook.getPublishedYear());
            ckbForRent.setSelected(selectedBook.isForRent());
        }
    }//GEN-LAST:event_lstBookNameValueChanged

    private void txtBookCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBookCodeMouseClicked
        // TODO add your handling code here:
        lbWarningBookCode.setText("");
    }//GEN-LAST:event_txtBookCodeMouseClicked

    private void txtBookNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBookNameMouseClicked
        // TODO add your handling code here:
        lbWarningBookName.setText("");
    }//GEN-LAST:event_txtBookNameMouseClicked

    private void txtAuthorNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAuthorNameMouseClicked
        // TODO add your handling code here:
        lbWarningAuthorName.setText("");
    }//GEN-LAST:event_txtAuthorNameMouseClicked

    private void txtPublisherNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPublisherNameMouseClicked
        // TODO add your handling code here:
        lbWarningPublisherName.setText("");
    }//GEN-LAST:event_txtPublisherNameMouseClicked

    private void cbYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbYearItemStateChanged
        // TODO add your handling code here:
        lbWarningPublishedYear.setText("");
    }//GEN-LAST:event_cbYearItemStateChanged
    boolean isValidateForNewSave(String bookCode, String bookName, String authorName, String publisherName, String publishedYear) {
        boolean isValidate = true;
        if (bookCode.isEmpty()) {
            lbWarningBookCode.setText("Book code can't be empty");
            isValidate = false;
        } else {
            if (isExistedBookCode(bookCode)) {
                lbWarningBookCode.setText("Book code is existed");
                isValidate = false;
            }
        }
        if (bookName.isEmpty()) {
            lbWarningBookName.setText("Book name can't be empty");
            isValidate = false;
        } else {
            if (getBookByBookName(bookName) != null) {
                lbWarningBookName.setText("Book name is existed");
                isValidate = false;
            }
        }
        if (authorName.isEmpty()) {
            lbWarningAuthorName.setText("Author name can't be empty");
            isValidate = false;
        }
        if (publisherName.isEmpty()) {
            lbWarningPublisherName.setText("Publisher can't be empty");
            isValidate = false;
        }
        if (publishedYear.equalsIgnoreCase("Year")) {
            lbWarningPublishedYear.setText("Please select publishedYear");
            isValidate = false;
        }
        return isValidate;
    }

    boolean isValidateForUpdateSave(String newBookName, String authorName, String publisherName, String publishedYear, String oldBookName) {
        boolean isValidate = true;
        if (newBookName.isEmpty()) {
            lbWarningBookName.setText("Book name can't be empty");
            isValidate = false;
        } else {

            for (Book book : bookList) {
                if (book.getBookName().equalsIgnoreCase(newBookName) && !book.getBookName().equalsIgnoreCase(oldBookName)) {
                    lbWarningBookName.setText("Book name can't be duplicated");
                    isValidate = false;
                }
            }

        }
        if (authorName.isEmpty()) {
            lbWarningAuthorName.setText("Author name can't be empty");
            isValidate = false;
        }
        if (publisherName.isEmpty()) {
            lbWarningPublisherName.setText("Publisher can't be empty");
            isValidate = false;
        }
        if (publishedYear.equalsIgnoreCase("Year")) {
            lbWarningPublishedYear.setText("Please select publishedYear");
            isValidate = false;
        }
        return isValidate;
    }

    boolean isExistedBookCode(String bookCode) {
        for (Book book : bookList) {
            if (book.getBookCode().equalsIgnoreCase(bookCode)) {
                return true;
            }
        }
        return false;
    }

    Book getBookByBookName(String bookName) {
        for (Book book : bookList) {
            if (book.getBookName().equalsIgnoreCase(bookName)) {
                return book;
            }
        }
        return null;
    }

    void hideWarningLabel() {
        lbWarningBookCode.setText("");
        lbWarningBookName.setText("");
        lbWarningAuthorName.setText("");
        lbWarningPublisherName.setText("");
        lbWarningPublishedYear.setText("");
    }

    void setNewSetting() {
        txtBookCode.setEnabled(true);
        txtBookCode.setText("");
        txtBookName.setText("");
        txtAuthorName.setText("");
        txtPublisherName.setText("");
        cbYear.setSelectedIndex(0);
        ckbForRent.setSelected(false);
        hideWarningLabel();
    }

    int findBookIndex(String bookCode) {
        System.out.println(bookCode);
        for (int i = 0; i < bookList.size(); i++) {
            if (bookList.get(i).getBookCode().equalsIgnoreCase(bookCode)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExit;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btRemove;
    private javax.swing.JButton btSave;
    private javax.swing.JComboBox cbYear;
    private javax.swing.JCheckBox ckbForRent;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbWarningAuthorName;
    private javax.swing.JLabel lbWarningBookCode;
    private javax.swing.JLabel lbWarningBookName;
    private javax.swing.JLabel lbWarningPublishedYear;
    private javax.swing.JLabel lbWarningPublisherName;
    private javax.swing.JList lstBookName;
    private javax.swing.JTextField txtAuthorName;
    private javax.swing.JTextField txtBookCode;
    private javax.swing.JTextField txtBookName;
    private javax.swing.JTextField txtPublisherName;
    // End of variables declaration//GEN-END:variables
}
